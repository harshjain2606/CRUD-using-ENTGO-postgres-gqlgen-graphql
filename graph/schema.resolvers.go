package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"entgql-crud/ent"
	"entgql-crud/ent/user"
	"entgql-crud/graph/model"
	"entgql-crud/middleware"

	"entgql-crud/utils"
	"fmt"
	"strconv"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*ent.User, error) {
	// if input.Name == nil || *input.Name == "" {
	// 	return nil, fmt.Errorf("name is required")
	// }
	// if input.Email == "" || !strings.Contains(input.Email, "@") {
	// 	// Validate email format
	// 	return nil, fmt.Errorf("email  required in correct format")
	// }
	u, err := r.Client.User.
		Create().
		SetName(input.Name).
		SetEmail(input.Email).
		SetPassword(input.Password).
		Save(ctx)

	if err != nil {

		return nil, err
	}

	return u, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUser) (*ent.User, error) {
	userid, _ := strconv.Atoi(id)
	update := r.Client.User.UpdateOneID(userid)
	if input.Name != nil {
		update = update.SetName(*input.Name)
	}
	if input.Email != nil {
		update = update.SetEmail(*input.Email)
	}

	un, err := update.Save(ctx)
	if err != nil {
		return nil, err
	}

	return un, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	deleteid, _ := strconv.Atoi(id)
	return true, r.Client.User.DeleteOneID(deleteid).Exec(ctx)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.Loginpayload, error) {
	u, err := r.Client.User.
		Query().
		Where(user.EmailEQ(input.Email)).
		Only(ctx)
	if err != nil {
		return &model.Loginpayload{
			Success: false,
			Message: "User has more than one same email and same password sorry cannot login",
		}, nil
	}
	if u.Password != input.Password {
		return &model.Loginpayload{
			Success: false,
			Message: "Invalid password",
		}, nil
	}
	token, err := utils.GenerateJWT(u.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to generate token: %v", err)
	}
	// Check password match (use hashing in production)
	return &model.Loginpayload{
		Token:   &token,
		Message: "Login successful",
		Success: true,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	users, err := r.Client.User.Query().All(ctx)
	if err != nil {
		return nil, err
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*ent.User, error) {
	userid, _ := strconv.Atoi(id)
	user, err := r.Client.User.Get(ctx, userid)
	if err != nil {
		return nil, fmt.Errorf("user not found: %w", err)
	}
	return user, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	userIDVal := ctx.Value(middleware.UserIDKey)
	if userIDVal == nil {
		return nil, fmt.Errorf("unauthorized: user ID missing in context")
	}

	userID, ok := userIDVal.(int)
	if !ok {
		return nil, fmt.Errorf("invalid user ID type in context")
	}

	return r.Client.User.Get(ctx, userID)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
